1.
CREATE TABLE Employees (
  employeeNo INT NOT NULL IDENTITY,
  lastName VARCHAR(50) NOT NULL,
  fistName VARCHAR(50) NOT NULL,
  gender char not null,
  IDNumber VARCHAR(20) not null,
  salaryLevel int,
  PRIMARY KEY (employeeNo),
  FOREIGN KEY (departmentID)
 );

2. 

ALTER TABLE Employees
ALTER COLUMN LastName VARCHAR(60);

3.


CREATE PROCEDURE GetEmployeesByDepartment
(
  @DepartmentName VARCHAR(50) = NULL
)
AS
BEGIN
  IF @DepartmentName IS NULL
  BEGIN
    SELECT * FROM  Employees;
  END
  ELSE
  BEGIN
    SELECT * FROM Employees WHERE Department = @DepartmentName;
  END
END;
4.
CREATE PROCEDURE GetDepartmentEmployeeCount
AS
BEGIN
  SELECT Department, COUNT(*) AS EmployeeCount
  FROM Employees
  GROUP BY Department;
END;
5.
CREATE PROCEDURE UpdateSalaryByDepartment
(
  @DepartmentName VARCHAR(50),
  @IncreasePercentage DECIMAL(5, 2)
)
AS
BEGIN
  UPDATE Employees
  SET Salary = Salary + (Salary * (@IncreasePercentage / 100))
  WHERE Department = @DepartmentName;
END;
6.
Overlapping departments: If there are multiple departments with the same name, the procedure will update the salaries of employees in all those departments. This might lead to unintended salary increases for employees in departments with similar names.
Incorrect increase percentage: If an incorrect increase percentage is provided as a parameter, it could result in incorrect salary updates. For example, a decimal point error or a wrong percentage value might cause significant salary adjustments that are not intended.
Data integrity issues: The procedure does not perform any validation or checks on the provided department name. If an incorrect or non-existent department name is passed as a parameter, the procedure will execute, but it will not update any records. This can lead to data integrity issues if the department name is not verified beforehand.
Impact on other salary-related calculations: If there are other calculations or business rules that depend on the salary column, updating the salary directly without considering these dependencies might cause inconsistencies or errors in those calculations.

7.
CREATE PROCEDURE CreateEmployee
(
  @EmployeeID INT,
  @FirstName VARCHAR(50),
  @LastName VARCHAR(50),
  @Department VARCHAR(50),
  @salaryLevel INT
)
AS
BEGIN
  DECLARE @DepartmentID INT;

  -- Check if department exists
  SELECT @departmentID = departmentID FROM Department WHERE name = @Department;

  IF @DepartmentID IS NULL
  BEGIN
    -- Department does not exist, handle accordingly (e.g., error handling, creating department, etc.)
    -- ...
	 IF (XACT_STATE()) = -1
      ROLLBACK TRANSACTION

	  IF (XACT_STATE()) = 1
      COMMIT TRANSACTION
  END
  ELSE
  BEGIN
    INSERT INTO Employees (employeeID, FirstName, LastName, Department, salaryLevel)
    VALUES (@EmployeeID, @FirstName, @LastName, @Department, @salaryLevel);
  END
END;

8.
CREATE PROCEDURE GetGenderCountByDepartment
(
  @Name VARCHAR(50)
)
AS
BEGIN
  SELECT
    SUM(CASE WHEN Gender = 'M' THEN 1 ELSE 0 END) AS MaleCount,
    SUM(CASE WHEN Gender = 'F' THEN 1 ELSE 0 END) AS FemaleCount
  FROM Employees
  WHERE Department = @Name;
END;
9.
CREATE PROCEDURE GetSalaryAndDepartment
(
  @EmployeeNo INT
)
AS
BEGIN
  SELECT Salary, Department
  FROM Employees
  WHERE EmployeeNo = @EmployeeNo;
END;

10.
CREATE PROCEDURE GetEmployeesWithInvalidSalaryLevel
AS
BEGIN
  SELECT *
  FROM Employees
  WHERE salaryLevelID NOT IN (SELECT salaryLevelID FROM SalaryLevel);
END;

2.1
  2.1.1
  (First Name, Last Name, and Department):

Table: Employees
Columns: FirstName, LastName, Department
IDNumber and LastName:

Table: Employees
Columns: IDNumber, LastName
Department and LastName:

Table: Employees
Columns: Department, LastName
 2.1.1 
 Increased storage space: Indexes require additional storage space on disk. Depending on the size of the indexed columns and the number of rows in the table, indexes can consume a significant amount of disk space. This can be a concern for large tables or in situations where disk space is limited.
 Increased maintenance overhead: Indexes need to be maintained whenever the underlying data is modified. Inserting, updating, or deleting rows in a table with indexes can be slower as the indexes also need to be updated. This additional maintenance overhead can impact the performance of data modification operations.
 Increased disk I/O: Indexes allow for faster data retrieval, but they can also result in increased disk I/O. When a query is executed, the database engine may need to access the index pages in addition to the actual data pages. This can lead to increased disk I/O operations, especially if indexes are heavily used or if there are many indexes on a table.
 Index fragmentation: Over time, indexes can become fragmented, meaning that the physical order of the index pages does not match the logical order of the data. Fragmentation can negatively impact query performance, as the database engine needs to perform additional disk I/O to access fragmented index pages. Regular index maintenance, such as rebuilding or reorganizing indexes, is required to mitigate fragmentation.

Overuse of indexes: Having too many indexes on a table can actually degrade performance rather than improving it. Each additional index requires additional storage space and maintenance overhead. Moreover, during query execution, the database engine needs to evaluate multiple index options, leading to increased query optimization time. It's important to strike a balance between the benefits and drawbacks of indexes and carefully consider which columns and queries truly require indexing.

2.1.2
Increased storage space: Indexes require additional storage space on disk. Depending on the size of the indexed columns and the number of rows in the table, indexes can consume a significant amount of disk space. This can be a concern for large tables or in situations where disk space is limited.
Increased maintenance overhead: Indexes need to be maintained whenever the underlying data is modified. Inserting, updating, or deleting rows in a table with indexes can be slower as the indexes also need to be updated. This additional maintenance overhead can impact the performance of data modification operations.
Increased disk I/O: Indexes allow for faster data retrieval, but they can also result in increased disk I/O. When a query is executed, the database engine may need to access the index pages in addition to the actual data pages. This can lead to increased disk I/O operations, especially if indexes are heavily used or if there are many indexes on a table.
Index fragmentation: Over time, indexes can become fragmented, meaning that the physical order of the index pages does not match the logical order of the data. Fragmentation can negatively impact query performance, as the database engine needs to perform additional disk I/O to access fragmented index pages. Regular index maintenance, such as rebuilding or reorganizing indexes, is required to mitigate fragmentation.

Overuse of indexes: Having too many indexes on a table can actually degrade performance rather than improving it. Each additional index requires additional storage space and maintenance overhead. Moreover, during query execution, the database engine needs to evaluate multiple index options, leading to increased query optimization time. It's important to strike a balance between the benefits and drawbacks of indexes and carefully consider which columns and queries truly require indexing.

2.2 
Functionality:

ISNULL: The ISNULL function is used to replace a NULL value with a specified value. It takes two arguments: the expression to evaluate and the replacement value. If the expression is NULL, the function returns the replacement value; otherwise, it returns the original expression.
Example: ISNULL(column_name, replacement_value)

COALESCE: The COALESCE function is used to return the first non-NULL value from a list of expressions. It takes multiple arguments, and it evaluates them in order. It returns the first non-NULL expression encountered in the list. If all expressions are NULL, it returns NULL.
Example: COALESCE(expression1, expression2, ..., expressionN)

Number of Arguments:

ISNULL: It takes only two arguments: the expression to evaluate and the replacement value. The replacement value must have a compatible data type with the expression.
COALESCE: It takes two or more arguments, allowing you to specify multiple expressions. You can provide any number of expressions as arguments, and they can have different data types. The result will have the data type of the highest precedence expression.
Data Type Conversion:
ISNULL: The replacement value in the ISNULL function must have the same data type as the expression. If the replacement value has a different data type, an implicit conversion will be attempted if possible.
COALESCE: The COALESCE function allows expressions with different data types. In this case, the data type of the result will depend on the data type precedence rules of the database system, where the data type with the highest precedence among the provided expressions will be used as the result data type.
Portability:
ISNULL: The ISNULL function is typically specific to Microsoft SQL Server and Sybase databases. It may not be available or have different behavior in other database systems.
COALESCE: The COALESCE function is a standard SQL function and is supported by most major database systems, including Microsoft SQL Server, MySQL, Oracle, and PostgreSQL.
In general, COALESCE provides more flexibility in handling NULL values since it can evaluate multiple expressions and return the first non-NULL value. ISNULL is simpler and more limited, as it only replaces a NULL value with a specified value. When working with multiple expressions and different data types, COALESCE is generally the preferred choice.
2.3
The SQL statement provided is syntactically valid. It is an INSERT INTO statement that inserts a new row into the Employees table with the specified values for the columns employeeNo, lastName, firstName, gender, IDNumber, and departmentID.
Here's the corrected statement with proper table and column names:

INSERT INTO Employees
(EmployeeNo, LastName, FirstName, Gender, IDNumber, departmentID)
VALUES (12, 'Terry', 'John', 'M', '80050850980874', 4);

2.4
Data organization and normalization: Relational databases follow the principles of normalization, which aim to minimize data redundancy and ensure data integrity. By organizing related data into separate tables, you can avoid data duplication and achieve a more efficient and maintainable database structure. Each table represents a distinct entity or concept, and the relationships between tables are established through keys (primary and foreign keys).
Data integrity and consistency: Relational databases enforce referential integrity through the use of foreign keys. By defining relationships between tables, you can ensure that data consistency is maintained. For example, in your case, by having a separate "Departments" table and using the "departmentID" as a foreign key in the "Employees" table, you can enforce that an employee must belong to an existing department. This helps prevent data anomalies and maintain data integrity.
Scalability and extensibility: A relational table structure allows for scalability and extensibility. As your data requirements grow or change over time, it is easier to add new tables, modify existing ones, or establish new relationships between tables without affecting the entire database structure. This provides flexibility in adapting to evolving business needs.
Query performance and optimization: Relational databases are designed to efficiently handle complex queries and support indexing mechanisms. With a well-designed relational structure, you can optimize query performance by creating appropriate indexes, utilizing query optimization techniques, and leveraging the power of the relational database management system (RDBMS) to execute queries more efficiently.
Data consistency and atomicity: Relational databases provide mechanisms like transactions to ensure atomicity and data consistency. Transactions allow you to group multiple database operations into a single unit of work, ensuring that either all the operations are executed successfully, or none of them are. This helps maintain data consistency, especially when multiple tables are involved in complex operations.

3.1
CREATE FUNCTION dbo.MapEcentricTestTable
(
  @Name VARCHAR(255)
)
RETURNS INT
AS
BEGIN
  DECLARE @ID INT;
  SELECT @ID = ID
  FROM dbo.EcentricTestTable
  WHERE Name = @Name;

  RETURN @ID;
END;
3.1
Use parameterization: Instead of calling the dbo.MapEcentricTestTable function within the query directly, you can assign the result of the function to a variable first. This allows the database engine to evaluate the function only once rather than for each row during the join operation.
Proper indexing: Ensure that the relevant columns used in the join condition and the filtering condition are indexed in both dbo.EcentricTestTable and EcentricTestTable_NEW tables. Indexing can significantly improve query performance, especially when dealing with large datasets.
Optimized version of the query:

DECLARE @ID INT;
SET @ID = dbo.MapEcentricTestTable('Test2');

SELECT *
FROM dbo.EcentricTestTable e
JOIN EcentricTestTable_NEW n ON n.ID = e.ID
WHERE e.ID = @ID;

4
4.1.1
In SQL, the comparison operator '=' is used to check for equality between two values. However, when comparing with NULL, the result is always considered as unknown rather than true or false. This behavior is due to the three-valued logic implemented in SQL, which includes the values true, false, and unknown.
In the given query, the comparison 'NULL = NULL' is evaluating whether NULL is equal to NULL. Since the result of this comparison is unknown, the CASE statement will evaluate the 'ELSE' branch and return 'No'. It means that the condition 'NULL = NULL' is considered false or not true.
To compare if a value is NULL or not in SQL, the 'IS NULL' or 'IS NOT NULL' operators should be used instead of the equality operator '='. For example:
SELECT CASE WHEN NULL IS NULL THEN 'Yes' ELSE 'No' END AS Result

4.1.2
The original query, SELECT CASE WHEN NULL = NULL THEN 'Yes' ELSE 'No' END AS Result, will always produce the result 'No' because of the behavior of the equality comparison with NULL values in SQL, as explained in the previous response.
However, there is a scenario where the original query could produce a different result, and that is if the database system has a non-standard behavior or a configuration that overrides the default behavior for comparing NULL values. In some database systems, there might be settings or options that can be enabled to treat NULL values as equal in equality comparisons.
For example, some database systems have a configuration option called "ANSI_NULLS" that can be set to ON or OFF. When "ANSI_NULLS" is set to OFF, the equality comparison between two NULL values can be evaluated as true, resulting in the CASE statement returning 'Yes' instead of 'No'. However, it's important to note that this behavior is non-standard and not recommended in SQL.

4.1.3
  SELECT CASE WHEN NULL IS NULL THEN 'Yes' ELSE 'No' END AS Result;
  In this query, the IS NULL operator is used to check if the value is NULL. If the value is indeed NULL, the CASE statement will evaluate the condition as true and return 'Yes'. Otherwise, if the value is not NULL, the condition will be evaluated as false, and 'No' will be returned.
  This query follows the standard behavior in SQL for handling NULL values and ensures that the comparison is performed correctly.
